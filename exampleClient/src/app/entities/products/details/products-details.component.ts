import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { ProductsService } from '../products.service';
import { IProducts
 } from '../iproducts';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';


@Component({
  selector: 'app-products-details',
  templateUrl: './products-details.component.html',
  styleUrls: ['./products-details.component.scss']
})
export class ProductsDetailsComponent extends BaseDetailsComponent<IProducts> implements OnInit {
	title = 'Products';
	parentUrl = 'products';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public productsService: ProductsService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, productsService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Products';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      name: ['', Validators.required],
      price: ['', Validators.required],
      productId: [{value: '', disabled: true}, Validators.required],
      stock: ['', Validators.required],
      
    });
    
    this.fields = [
        {
		  name: 'name',
		  label: 'name',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'price',
		  label: 'price',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.Number,
	    },
        {
		  name: 'productId',
		  label: 'product Id',
		  isRequired: true,
		  isAutoGenerated: true,
	      type: FieldType.Number,
	    },
        {
		  name: 'stock',
		  label: 'stock',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.Number,
	    },
      ];
      
  }
  
  onItemFetched(item: IProducts) {
    this.item = item;
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'productId',
	          value: undefined,
	          referencedkey: 'productId'
			},
		],
		isParent: true,
		table: 'orderitems',
		type: 'OneToMany',
		label: 'orderitems',
		},
      {
        column: [
	        {
	          key: 'productId',
	          value: undefined,
	          referencedkey: 'productId'
			},
		],
		isParent: true,
		table: 'productsuppliers',
		type: 'OneToMany',
		label: 'productsuppliers',
		},
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let products = this.itemForm.getRawValue();



        super.onSubmit(products);
	}
}
