import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { OrderitemsService } from '../orderitems.service';
import { IOrderitems
 } from '../iorderitems';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';

import { OrdersService } from 'src/app/entities/orders/orders.service';
import { ProductsService } from 'src/app/entities/products/products.service';

@Component({
  selector: 'app-orderitems-details',
  templateUrl: './orderitems-details.component.html',
  styleUrls: ['./orderitems-details.component.scss']
})
export class OrderitemsDetailsComponent extends BaseDetailsComponent<IOrderitems> implements OnInit {
	title = 'Orderitems';
	parentUrl = 'orderitems';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public orderitemsService: OrderitemsService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
		public ordersService: OrdersService,
		public productsService: ProductsService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, orderitemsService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Orderitems';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      orderItemId: [{value: '', disabled: true}, Validators.required],
      priceAtOrderTime: ['', Validators.required],
      quantity: ['', Validators.required],
      orderId: [''],
      ordersDescriptiveField : [''],
      productId: [''],
      productsDescriptiveField : [''],
      
    });
    
    this.fields = [
        {
		  name: 'orderItemId',
		  label: 'order Item Id',
		  isRequired: true,
		  isAutoGenerated: true,
	      type: FieldType.Number,
	    },
        {
		  name: 'priceAtOrderTime',
		  label: 'price At Order Time',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.Number,
	    },
        {
		  name: 'quantity',
		  label: 'quantity',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.Number,
	    },
      ];
      
  }
  
  onItemFetched(item: IOrderitems) {
    this.item = item;
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'orderId',
	          value: undefined,
	          referencedkey: 'orderId'
			},
		],
		isParent: false,
		table: 'orders',
		type: 'ManyToOne',
		label: 'orders',
		service: this.ordersService,
		descriptiveField: 'ordersDescriptiveField',
	    referencedDescriptiveField: 'orderId',
		},
      {
        column: [
	        {
	          key: 'productId',
	          value: undefined,
	          referencedkey: 'productId'
			},
		],
		isParent: false,
		table: 'products',
		type: 'ManyToOne',
		label: 'products',
		service: this.productsService,
		descriptiveField: 'productsDescriptiveField',
	    referencedDescriptiveField: 'productId',
		},
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let orderitems = this.itemForm.getRawValue();



        super.onSubmit(orderitems);
	}
}
